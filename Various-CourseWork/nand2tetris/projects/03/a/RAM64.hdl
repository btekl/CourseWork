// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM64.hdl

/**
 * Memory of 64 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
        DMux8Way(in=load, sel=address[3..5], a=aRam, b=bRam, c=cRam, d=dRam, e=eRam, f=fRam, g=gRam, h=hRam);

        RAM8(in=in, load=aRam, address=address[0..2], out=aRamout);
        RAM8(in=in, load=bRam, address=address[0..2], out=bRamout);
        RAM8(in=in, load=cRam, address=address[0..2], out=cRamout);
        RAM8(in=in, load=dRam, address=address[0..2], out=dRamout);
        RAM8(in=in, load=eRam, address=address[0..2], out=eRamout);
        RAM8(in=in, load=fRam, address=address[0..2], out=fRamout);
        RAM8(in=in, load=gRam, address=address[0..2], out=gRamout);
        RAM8(in=in, load=hRam, address=address[0..2], out=hRamout);

        Mux8Way16(a=aRamout, b=bRamout, c=cRamout, d=dRamout, e=eRamout, f=fRamout, g=gRamout, h=hRamout, sel=address[3..5], out=out);

}